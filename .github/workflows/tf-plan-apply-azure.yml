name: "Terraform Plan/Apply - Production"

on:
  workflow_call:

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

#These environment variables are used by the terraform azure provider to setup OIDC authentication.
env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"

jobs:
  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of the Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Select the appropriate terraform workspace for the current environment, envrionemnt is set in the worfkflow file of the caller repo
      - name: Select appropriate terraform workspace for Production
        run: terraform workspace select -or-create production

      # Checks that all Terraform configuration files adhere to a canonical format
      # Will fail the build if not
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi

      # Save plan to artifacts
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan

      # Create string output of Terraform Plan
      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)

          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      # Publish Terraform Plan as task summary
      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

      # If this is a PR post the changes
      - name: Push Terraform Output to PR
        if: github.ref != 'refs/heads/production'
        uses: actions/github-script@v7
        env:
          SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })

  terraform-apply:
    name: "Terraform Apply"
    if: github.ref == 'refs/heads/production' && needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    environment: production
    needs: [terraform-plan]

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Select the appropriate terraform workspace for the current environment, envrionemnt is set in the worfkflow file of the caller repo
      - name: Select appropriate terraform workspace for Production
        run: terraform workspace select production

      # Download saved plan from artifacts
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan

      # Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

  release:
    name: Release
    if: github.ref == 'refs/heads/production'
    needs: [terraform-apply]
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Get the latest tag
      - name: Get latest tag
        id: get_latest_tag
        continue-on-error: true
        run: |
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            echo "No tags found, setting initial tag to v1.0.0"
            latest_tag="v1.0.0"
          fi
          echo "Latest tag: $latest_tag"
          echo "tag=$latest_tag" >> $GITHUB_ENV

      # Bump version (e.g., v1.0.0 to v1.0.1)
      - name: Bump version
        id: bump_version
        run: |
          if [ -z "$tag" ]; then
            echo "No tags found, defaulting to v1.0.0"
            new_tag="v1.0.0"
          else
            # Extract the numeric part of the latest tag
            version=${tag/v/}
            major=$(echo $version | cut -d. -f1)
            minor=$(echo $version | cut -d. -f2)
            patch=$(echo $version | cut -d. -f3)

            # Increment the patch version
            new_patch=$((patch + 1))
            new_tag="v${major}.${minor}.${new_patch}"
          fi
          echo "new_tag=$new_tag" >> $GITHUB_ENV
          echo "New tag: $new_tag"

      # Create and push the new tag
      - name: Create new tag
        run: |
          git tag $new_tag
          git push origin $new_tag
